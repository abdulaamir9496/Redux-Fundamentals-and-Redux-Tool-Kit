{"mappings":"AAAA,gBAAgB;AAChB,iBAAiB;AACjB,qBAAqB;AACrB,eAAe;AACf,wBAAwB;AACxB,IAAI;AAEJ,yBAAyB;AAEzB,iCAAiC;AACjC,iCAAiC;AACjC,iCAAiC;AAEjC,yBAAyB;AACzB,iCAAiC;AACjC,wCAAwC;AAExC,qCAAqC;AACrC,kDAAkD;AAClD,IAAI;AAEJ,eAAe;AACf,sBAAsB;AAEtB,eAAe;AACf,sBAAsB;AAEtB,eAAe;AACf,sBAAsB;AAEtB,yCAAyC;AACzC,yFAAyF;AAEzF,gBAAgB;AAChB,iBAAiB;AACjB,qBAAqB;AACrB,eAAe;AACf,wBAAwB;AACxB,IAAI;AAEJ,0CAA0C;AAE1C,oHAAoH;AACpH,oDAAoD;AACpD,8GAA8G;AAC9G,sIAAsI;AACtI,IAAI;AAEJ,sBAAsB;AACtB,qBAAqB;AACrB,cAAc;AACd,qBAAqB;AACrB,eAAe;AACf,wBAAwB;AACxB,IAAI;AAEJ,4BAA4B;AAC5B,0CAA0C;AAC1C,IAAI;AAEJ,oCAAoC;AACpC,oCAAoC;AACpC,oCAAoC;AAEpC,yCAAyC;AAEzC,uBAAuB;AACvB,4FAA4F;AAC5F,qBAAqB;AACrB,aAAa;AACb,qBAAqB;AACrB,eAAe;AACf,wBAAwB;AACxB,IAAI;AAEJ,oCAAoC;AACpC,4DAA4D;AAC5D,0CAA0C;AAC1C,IAAI;AAEJ,uHAAuH;AAEvH,iDAAiD;AACjD,sIAAsI;AAEtI,yFAAyF;AAEzF,yEAAyE;AAEzE,IAAI,aAAa;IACb,IAAI;IACJ,MAAM;IACN,KAAK;IACL,MAAM;AACV;AAEA,SAAS,QAAQ,KAAK,EAAE,MAAM;IAC1B,sCAAsC;IAEtC,yFAAyF;IAEzF,IAAG,OAAO,IAAI,KAAK,kBACf,OAAO;QAAC,GAAG,KAAK;QAAE,IAAI,MAAM,EAAE,GAAG;IAAC;SAC/B,IAAG,OAAO,IAAI,KAAK,kBACtB,OAAO;QAAC,GAAG,KAAK;QAAE,IAAI,MAAM,EAAE,GAAG;IAAC;SAC/B,IAAG,OAAO,IAAI,KAAK,oBACtB,iFAAiF;IACjF,wIAAwI;IACxI,OAAO;QAAC,GAAG,KAAK;QAAE,IAAI,MAAM,EAAE,GAAG,OAAO,OAAO;IAAA;IAEnD,OAAO;AACX;AAEA,sBAAsB;AACtB,QAAQ,GAAG,CAAC;AAEZ,yFAAyF;AAEzF,aAAa,QAAQ,YAAY;IAAC,MAAM;AAAgB;AACxD,QAAQ,GAAG,CAAC;AACZ,aAAa,QAAQ,YAAY;IAAC,MAAM;AAAgB;AACxD,QAAQ,GAAG,CAAC;AACZ,aAAa,QAAQ,YAAY;IAAC,MAAM;AAAgB;AACxD,QAAQ,GAAG,CAAC;AACZ,iCAAiC;AACjC,aAAa,QAAQ,YAAY;IAAC,MAAM;IAAoB,SAAS;AAAE,GAAK,2BAA2B;;AACvG,QAAQ,GAAG,CAAC;AACZ,aAAa,QAAQ,YAAY;IAAC,MAAM;IAAoB,SAAS;AAAE,GAAK,2BAA2B;;AACvG,QAAQ,GAAG,CAAC;AACZ,aAAa,QAAQ,YAAY;IAAC,MAAM;IAAoB,SAAS;AAAC,GAAM,2BAA2B;;AACvG,QAAQ,GAAG,CAAC,YAEZ,yDAAyD;CACzD,uFAAuF;CACvF,yGAAyG;CACzG,oFAAoF;CACpF,sEAAsE;CAEtE,cAAc;CACd,2CAA2C;CAC3C,+DAA+D;CAC/D,qEAAqE;CACrE,sBAAsB;CACtB,6DAA6D;CAC7D,gDAAgD;CAChD,uBAAuB;CACvB,qKAAqK","sources":["script.js"],"sourcesContent":["// let state = {\r\n//     count : 0,\r\n//     name: 'Aamir',\r\n//     age: 28,\r\n//     city: \"Hyderabad\"\r\n// }\r\n\r\n// let prevState = state;\r\n\r\n// state.count = state.count + 1;\r\n// state.count = state.count + 1;\r\n// state.count = state.count + 1;\r\n\r\n// function increment() {\r\n//     //*** Mutating State ***//\r\n//     // state.count = state.count + 1;\r\n\r\n//     //*** Not Mutating State ***//\r\n//     state = {...state, count: state.count + 1};\r\n// }\r\n\r\n// increment();\r\n// console.log(state);\r\n\r\n// increment();\r\n// console.log(state);\r\n\r\n// increment();\r\n// console.log(state);\r\n\r\n//Redux says we should'nt call like this.\r\n// We should not mutate the state. Without mutating the state we should change the state.\r\n\r\n// let state = {\r\n//     count : 0,\r\n//     name: 'Aamir',\r\n//     age: 28,\r\n//     city: \"Hyderabad\"\r\n// }\r\n\r\n//Reducer function: Reducer means updater.\r\n\r\n// function stateUpdater(state) {    //Redux says stateUpdater is a reducer, which means reducer is a (stateUpdater)\r\n//     state = {...state, count: state.count + 1}   \r\n//     //Redux says no not this way. You should not touch directly. No updating like this for updating values.\r\n//     //Then how ? Redux says I will update by myself(Redux). How ? Redux says I will pass state(as a parameter) & return new state..\r\n// }\r\n\r\n//What Redux will do ?\r\n// let reduxState = {\r\n//     ID : 0,\r\n//     name: 'Aamir',\r\n//     age: 28,\r\n//     city: \"Hyderabad\"\r\n// }\r\n\r\n// function reducer(state) {\r\n//     return{...state, ID: state.ID + 1};\r\n// }\r\n\r\n// reduxState = reducer(reduxState);\r\n// reduxState = reducer(reduxState);\r\n// reduxState = reducer(reduxState);\r\n\r\n//Behind the scenes this is how it works.\r\n\r\n//TOPIC: state + action\r\n//Along with the state we also pass action. action is a plane JS Object. How it looks like ?\r\n// let reduxState = {\r\n//     ID: 0,\r\n//     name: 'Aamir',\r\n//     age: 28,\r\n//     city: \"Hyderabad\"\r\n// }\r\n\r\n// function reducer(state, action) {\r\n//     console.log(action);    //Now it shows as 'undefined'\r\n//     return{...state, ID: state.ID + 1};\r\n// }\r\n\r\n// reduxState = reducer(reduxState, action);    //redux will pass the action. We will pass action manually differently.\r\n\r\n//we can directly create action as shown below:  \r\n// reduxState = reducer(reduxState, {type: 'post/increment'});   //This is action's type. By convention post/increment is good to use.\r\n\r\n//type: Describes what kind of action is happening (e.g., \"add a todo\", \"delete a todo\").\r\n\r\n//Still it looks confusing ? Will understand with the real time scenario.\r\n\r\nlet reduxState = {\r\n    ID: 0,\r\n    name: \"Aamir\",\r\n    age: 28,\r\n    city: \"Hyderabad\"\r\n}\r\n\r\nfunction reducer(state, action) {\r\n    // return{...state, ID: state.ID + 1};\r\n\r\n    //type: Describes what kind of action is happening (e.g., \"add a todo\", \"delete a todo\").\r\n\r\n    if(action.type === 'post/increment') {\r\n        return {...state, ID: state.ID + 1};\r\n    } else if(action.type === 'post/decrement') {\r\n        return {...state, ID: state.ID - 1};\r\n    } else if(action.type === 'post/incrementBy') {\r\n        // return {...state, ID: state.ID + 1, payload: action.payload + action.payload};\r\n        // payload: Extra data. Provides the extra details needed to perform that action (e.g., the todo text, or the ID of the todo to delete).\r\n        return {...state, ID: state.ID + action.payload}\r\n    }\r\n    return state;\r\n}\r\n\r\n//What will redux do ?\r\nconsole.log(reduxState)\r\n\r\n//type: Describes what kind of action is happening (e.g., \"add a todo\", \"delete a todo\").\r\n\r\nreduxState = reducer(reduxState, {type: 'post/increment'})\r\nconsole.log(reduxState)\r\nreduxState = reducer(reduxState, {type: 'post/increment'})\r\nconsole.log(reduxState)\r\nreduxState = reducer(reduxState, {type: 'post/decrement'})\r\nconsole.log(reduxState)\r\n//Incrementing values using Redux\r\nreduxState = reducer(reduxState, {type: 'post/incrementBy', payload: 10})   // Extra data needed to add\r\nconsole.log(reduxState)\r\nreduxState = reducer(reduxState, {type: 'post/incrementBy', payload: 15})   // Extra data needed to add\r\nconsole.log(reduxState)\r\nreduxState = reducer(reduxState, {type: 'post/incrementBy', payload: 7})    // Extra data needed to add\r\nconsole.log(reduxState)\r\n\r\n//Reducer function reduces the state into a single value.\r\n//Here above lines of code we have seen repetitive code for updating state management. \r\n//It helps you manage global state by providing a state management mechanism for JavaScript applications \r\n//that require state management and state management functions in Redux and provide \r\n//the ability to manage state management for JavaScript applications. \r\n\r\n//TOPIC: Redux\r\n//We will install Redux & parcel (Globally)\r\n//npm init -y (simple npm project gets created by this command)\r\n//npm install -g parcel (parcel project gets created by this command)\r\n//parcel what it does?\r\n// It collects all the files in a bundle and starts a server.\r\n// So we can work in a different different files\r\n//npx parcel index.html\r\n//npm i redux (we could have installed it earlier but we couldn't use it by importing, If we try to import it didn't get imported. Normal JS don't know node modules)\r\n\r\n\r\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}